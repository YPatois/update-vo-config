#!/usr/bin/env python3.12
# -*- coding: utf-8 -*-

# Copyright 2024 CNRS and University of Strasbourg
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# 80 columns line comment for reference:
# ------------------------------------------------------------------------------
import ipaddress
import argparse
from ansible.parsing.dataloader import DataLoader
from ansible.inventory.manager import InventoryManager
from ansible.vars.manager import VariableManager

DESCRIPTION = "Generates files to be used for PXE booting from ansible data"
VERSION = "0.1"


# ------------------------------------------------------------------------------
class MyMyHostsData():
    """My hosts data."""
    def __init__(self,hosts_file):
        """Init."""
        self.hosts_file = hosts_file
        self.read_ansible_data()

    def read_ansible_data(self):
        """Get data."""
        self.data_loader = DataLoader()
        self.inventory = InventoryManager(loader = self.data_loader,
            sources=[self.hosts_file])
        self.variable_manager = VariableManager(loader=self.data_loader,
            inventory=self.inventory)
        
    def list_hosts(self):
        """List hosts."""
        hosts = self.inventory.list_hosts()
        print (hosts)

    def list_groups(self):
        """List groups."""
        groups = self.inventory.list_groups()
        print (groups)

    def list_hosts_in_group(self, group_name):
        """List hosts in group."""
        hosts = self.inventory.get_groups_dict()[group_name]
        print (hosts)
    
    def get_vars(self,hostname):
        """Get vars."""
        vars = self.variable_manager.get_vars(
            host=self.inventory.get_host(hostname))
        return vars



class CreatePXEFile():
    """Create PXE file."""
    defaults = {
        'linux': '/alma9.4_x86_64/vmlinuz',
        'ramdisk': 32768,
        'initrd': '/alma9.4_x86_64/initrd.img',
        'nameserver': ['193.48.86.103', '193.48.86.224'],
        'noipv6': '1',
        'disable_ipv6': '1',
        'ipv6.disable_ipv6': '1',
    }
    def __init__(self,host_vars):
        """Init."""
        self.host_vars = host_vars
        self.set_pxe_data()
    

    def set_pxe_data(self):
        """Set PXE data."""
        self.pxe_data={}
        for key, value in self.defaults.items():
            self.pxe_data[key] = value
        self.pxe_data['_hostname'] = self.host_vars['inventory_hostname']
        if (not 'gateway' in self.host_vars):
            gateway = '.'.join(self.host_vars['ipv4'].split('.')[0:3]+['2'])
        
        # self.host_vars['ipv4'] is an x.x.x.x/x format
        network = ipaddress.ip_network(self.host_vars['ipv4'],strict=False)
        netmask= str(network.netmask)
        hostip = self.host_vars['ipv4'].split('/')[0]
        
        self.pxe_data['ip'] = ':'.join([hostip,
            '',gateway,netmask,self.pxe_data['_hostname'],
            '','none'])

        if (False & ('ipv6' in self.host_vars)):
            # remove entries that disable ipv6 in pxe data
            del self.pxe_data['noipv6']
            del self.pxe_data['disable_ipv6']
            del self.pxe_data['ipv6.disable_ipv6']

    def write_pxe_file(self,filename):
        """Write PXE file."""
        # Open filename for writing
        with open(filename, 'w') as f:
            f.write('set root=(pxe)\n')

            # Write data
            for key, value in self.pxe_data.items():
                # If key starts with _, skip it
                if key[0] == '_':
                    continue
                # if value is list, loop over list
                if type(value) is list:
                    for item in value:
                        f.write('%s=%s ' % (key, item))
                else:
                    f.write('%s=%s ' % (key, value))
            f.write('\n')

            # Write end of file
            f.write('boot\n')

    def create_pxe_file(self):
        """Create PXE file."""
        print (self.host_vars['inventory_hostname'])
        print (self.host_vars['ipv4'])
        print (self.host_vars['ipv6'])
        


# ------------------------------------------------------------------------------
def main():
    """Main function."""
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument(
        "-v", "--version", action="version", version=VERSION,
        help="show program\'s version number and exit"
    )
    args = parser.parse_args()

    my_hosts_data = MyMyHostsData("sample_files/hosts")
    #my_hosts_data.list_hosts()
    #my_hosts_data.list_groups()
    #my_hosts_data.list_hosts_in_group("ce_arc")

    host_vars = my_hosts_data.get_vars("sbgce1.in2p3.fr")

    create_pxe_file = CreatePXEFile(host_vars)
    create_pxe_file.write_pxe_file("sbgce1.in2p3.fr.pxe")

    


if __name__ == '__main__':
    main()

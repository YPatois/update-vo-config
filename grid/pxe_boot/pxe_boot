#!/usr/bin/env python3.12
# -*- coding: utf-8 -*-

# Copyright 2024 CNRS and University of Strasbourg
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# FIXME: this should be dynamically generated inside ansible

# 80 columns line comment for reference:
# ------------------------------------------------------------------------------
import os
import ipaddress
import argparse
from ansible.parsing.dataloader import DataLoader
from ansible.inventory.manager import InventoryManager
from ansible.vars.manager import VariableManager
from ansible.template import Templar

DESCRIPTION = "Generates files to be used for PXE booting from ansible data"
VERSION = "0.1"


# ------------------------------------------------------------------------------
class MyMyHostsData():
    """My hosts data."""
    def __init__(self,hosts_file):
        """Init."""
        self.hosts_file = hosts_file
        self.read_ansible_data()

    def read_ansible_data(self):
        """Get data."""
        self.data_loader = DataLoader()
        self.data_loader.set_basedir(os.path.dirname(self.hosts_file))
        self.inventory = InventoryManager(loader = self.data_loader,
            sources=[self.hosts_file])
        self.variable_manager = VariableManager(loader=self.data_loader,
            inventory=self.inventory)
        
    def get_hosts_list(self):
        """List hosts."""
        return self.inventory.get_hosts()
        

    def list_groups(self):
        """List groups."""
        groups = self.inventory.list_groups()
        print (groups)

    def list_hosts_in_group(self, group_name):
        """List hosts in group."""
        hosts = self.inventory.get_groups_dict()[group_name]
        print (hosts)
    
    def get_vars(self,host):
        """Get vars."""
        yvars = self.variable_manager.get_vars(host=host)
        templar = Templar(
            loader=self.data_loader, variables=yvars)
        # HACK: quick fix for vault data
        vlist=[ 'vault_munge_key_password',
                'vault_slurm_mysql_password',
                'vault_cms_scratch_key']
        for v in vlist:
            yvars[v] = 'secret'
        for k, v in yvars.items():
            yvars[k] = templar.template(v)
        return yvars
    

class OneHostData():
    """One host data."""

    def __init__(self,host_vars):
        """Init."""
        self.host_vars = host_vars
        self.set_host_data()
    
    def set_host_data(self):
        """Set host data."""
        self.host_data = {}
        self.host_data['hostname'] = self.host_vars['inventory_hostname']
        print (self.host_data['hostname'])
        if (not 'gateway' in self.host_vars):
            self.host_data['gateway'] =  '.'.join(
                self.host_vars['ipv4'].split('.')[0:3]+['2'])
        else:
            self.host_data['gateway'] = self.host_vars['gateway']
        network = ipaddress.ip_network(self.host_vars['ipv4'],strict=False)
        self.host_data['netmask'] = str(network.netmask)
        self.host_data['hostip'] = self.host_vars['ipv4'].split('/')[0]
        self.host_data['nameserver'] = ['193.48.86.103', '193.48.86.224']
        
        
# ------------------------------------------------------------------------------
class CreatePXEFile(OneHostData):
    """Create PXE file."""
    defaults = {
        '_kernel': '/alma9.6_x86_64/vmlinuz',
        'ramdisk': 32768,
        'initrd': '/alma9.6_x86_64/initrd.img',
        'noipv6': '1',
        'disable_ipv6': '1',
        'ipv6.disable_ipv6': '1',
        'inst.nompath': True,
        'nompath': True,
        'inst.sshd': True,
        'inst.cmdline': True,
    }
    def __init__(self,host_vars):
        """Init."""
        super().__init__(host_vars)
        self.set_pxe_data()
        self.write_pxe_file()
        self.write_pxe_file_legacy()
    

    def set_pxe_data(self):
        """Set PXE data."""
        self.pxe_data={}
        for key, value in self.defaults.items():
            self.pxe_data[key] = value
        self.pxe_data['_hostname'] = self.host_vars['inventory_hostname']
        self.pxe_data['ifname'] = ':'.join([self.host_vars['iface_name'],
            self.host_vars['ifdevice']])

        self.pxe_data['bootdev'] = self.host_vars['iface_name']

        self.pxe_data['gateway'] = self.host_data['gateway']
        
        self.pxe_data['ip'] = ':'.join([self.host_data['hostip'],
            self.host_vars['ifdevice'],
            self.host_data['netmask'],
            self.pxe_data['_hostname'],
            self.host_vars['iface_name'],'none'])

        self.pxe_data['nameserver'] = self.host_data['nameserver']

        # Lets do nothing on ipv6
        if (True & ('ipv6' in self.host_vars)):
            # remove entries that disable ipv6 in pxe data
            del self.pxe_data['noipv6']
            del self.pxe_data['disable_ipv6']
            del self.pxe_data['ipv6.disable_ipv6']

        # FIXME: Kickstart URL should be configurable
        self.pxe_data['inst.ks'] = (
            'http://sbgquattor.in2p3.fr/ks/ansible_ks/'
            + self.host_vars['inventory_hostname'] + '.ks'
        )

    def write_pxe_file(self):
        """Write PXE file."""
        filename = os.path.join('/opt/tmp/pxe_boot/tftpboot/grub-efi',
            self.host_vars['inventory_hostname'] + '.cfg')
        # Create directory if it doesn't exist
        if not os.path.exists(os.path.dirname(filename)):
            os.makedirs(os.path.dirname(filename))
        # Open filename for writing
        with open(filename, 'w') as f:
            f.write("""
set timeout=0
set default=0

menuentry 'Alma9.6' {
    set root=(pxe)
    linux """+self.pxe_data['_kernel']+' ')

            # Write data
            for key, value in self.pxe_data.items():
                # If key starts with _, skip it
                if key[0] == '_':
                    continue
                # if value is list, loop over list
                if type(value) is list:
                    for item in value:
                        f.write('%s=%s ' % (key, item))
                else:
                    # if value is just True, then only write the key
                    if value is True:
                        f.write('%s ' % key)
                    else:
                        f.write('%s=%s ' % (key, value))
            f.write('\n')
            f.write('    initrd ' + self.pxe_data['initrd'] + '\n')

            # Write end of file
            f.write('}\n')

    def write_pxe_file_legacy(self):
        """Write PXE file."""
        filename = os.path.join('/opt/tmp/pxe_boot/tftpboot/pxelinux.cfg',
            self.host_vars['inventory_hostname'] + '.cfg')
        # Create directory if it doesn't exist
        if not os.path.exists(os.path.dirname(filename)):
            os.makedirs(os.path.dirname(filename))
        # Open filename for writing
        with open(filename, 'w') as f:
            f.write("""
default Install AlmaLinux 9.6 (x86_64)

label Install AlmaLinux 9.6 (x86_64)
    kernel """+self.pxe_data['_kernel']+'\n')

            f.write('append ')

            # Write data
            for key, value in self.pxe_data.items():
                # If key starts with _, skip it
                if key[0] == '_':
                    continue
                # if value is list, loop over list
                if type(value) is list:
                    for item in value:
                        f.write('%s=%s ' % (key, item))
                else:
                    # if value is just True, then only write the key
                    if value is True:
                        f.write('%s ' % key)
                    else:
                        f.write('%s=%s ' % (key, value))
            f.write('\n')
            # Write end of file
            f.write('}\n')
class CreateKickstartFile(OneHostData):
    """Create Kickstart file."""
    def __init__(self,host_vars):
        """Init."""
        super().__init__(host_vars)
        self.set_kickstart_data()
        self.write_kickstart_file()
    

    def insert_files_data(self,blockname,source_filename,destination_filename=None):
        """Insert files data."""
        if (not destination_filename):
            blockstart=""
            blockend=""
        else:
            blockstart="cat << EOF > " + destination_filename + "\n"
            blockend="EOF\n"
        with open(source_filename, 'r') as f:
            blockbody = f.read()
        self.kickstart_data[blockname] = blockstart + blockbody + blockend
            
    def set_kickstart_data(self):
        """Set Kickstart data."""
        self.kickstart_data={}
        self.kickstart_data['head'] = """
# Generated by Ansible (not yet)
"""
        # Get ansible kickstart_partition_blob data
        if (not 'kickstart_partition_blob' in self.host_vars):
            # Aborting
            print('No kickstart_partition_blob in host_vars')
            sys.exit(1)
        partitions = ""
        has_software_raid=False
        for line in self.host_vars['kickstart_partition_blob']:
            if 'raid' in line: has_software_raid=True
            partitions = partitions + "\n" + line
        partitions = partitions + "\n"
        self.kickstart_data['partitions'] = partitions
        
        self.kickstart_data['block2'] = """
zerombr
bootloader --location=mbr

cmdline
url --url http://sbglinux.in2p3.fr/mirror/almalinux/almalinux/9/BaseOS/x86_64/os/

reboot
"""

        # read secret file into secretblock
        self.insert_files_data('secretblock1', 'vault/rootpw.ks')

        self.kickstart_data['block3'] = """
eula --agreed
skipx
lang en_US
keyboard --xlayouts=fr
selinux --permissive
timezone --utc Europe/Paris

firewall --disabled
        """
        # very basic network config, only setting hostname
        self.kickstart_data['network'] = ' '.join(
            ['network --hostname=' + self.host_data['hostname']]
        )

        self.kickstart_data['block4'] = """
%packages
rsync
wget
vim
chkconfig
%end
"""
        if (has_software_raid):
            self.kickstart_data['prescript'] = """
%pre
# This should be useless, but for some reason, it's needed
parted /dev/sda --script mklabel gpt
parted /dev/sdb --script mklabel gpt
parted /dev/sda --script mkpart primary ext4 0% 1%
parted /dev/sdb --script mkpart primary ext4 0% 1%
parted /dev/sda --script mkpart primary ext4 1% 3%
parted /dev/sdb --script mkpart primary ext4 1% 3%
parted /dev/sda --script mkpart primary ext4 3% 25%
parted /dev/sdb --script mkpart primary ext4 3% 25%
parted /dev/sda --script mkpart primary ext4 25% 100%
parted /dev/sdb --script mkpart primary ext4 25% 100%

mdadm -f --create /dev/md0 --level=1  --raid-devices=2 /dev/sda1 /dev/sdb1
mdadm -f --create /dev/md1 --level=1  --raid-devices=2 /dev/sda2 /dev/sdb2
mdadm -f --create /dev/md2 --level=1  --raid-devices=2 /dev/sda3 /dev/sdb3
mdadm -f --create /dev/md3 --level=1  --raid-devices=2 /dev/sda4 /dev/sdb4
mdadm --assemble --scan
%end
"""
        else:
            self.kickstart_data['prescript'] = """
%pre
%end
"""
        self.kickstart_data['block4.1'] = """
%post
sed -i -e "s/#PermitRootLogin.*/PermitRootLogin without-password/" /etc/ssh/sshd_config

mkdir -p /root/.ssh
chmod 0700 /root/.ssh

touch /root/.ssh/authorized_keys
chmod 0600 /root/.ssh/authorized_keys
touch 
"""
        # read secret file into secretblock2
        self.insert_files_data('secretblock2', 'vault/authorized_keys.ks', '/root/.ssh/authorized_keys')
        
        # FIXME: the two wget below are needed  but relies on Quattor installation
        self.kickstart_data['end'] = """
cat <<End_Of_Post_Reboot > /usr/local/sbin/ks-post-reboot.sh
#!/bin/bash
# Script to run at the first reboot. It installs the base Quattor RPMs
# and runs the components needed to get the system correctly
# configured.

# Wait for functional network up by testing DNS lookup via nslookup.
wait_for_network () {
    # Wait up to 2 minutes until the network comes up
    i=0
    while ! ping -c 1 -w 1 sbgquattor.in2p3.fr &> /dev/null; do
        sleep 1
        echo "ks-post-reboot: waiting for network"
        let i=\\$i+1
        if [ \\$i -gt 120 ]
        then
            fail "Network does not come up ( ping -c 1 -W 1 sbgquattor.in2p3.fr )"
        fi
    done
}
echo "Network is up"

exec >/root/ks-post-reboot.log 2>&1

wait_for_network 

wget -q --output-document=- 'http://sbgquattor.in2p3.fr/cgi-bin/sbg-askcert.cgi'

/usr/bin/systemctl disable ks-post-reboot.service
/usr/bin/systemctl mask ks-post-reboot.service
/usr/bin/systemctl daemon-reload

End_Of_Post_Reboot

cat <<EOF_reboot_unit > /usr/lib/systemd/system/ks-post-reboot.service
[Unit]
Description=Quattor AII Post reboot
After=network.target syslog.target syslog.socket rsyslog.service sshd.service
Requires=network.target

[Service]
Type=oneshot
ExecStart=/usr/local/sbin/ks-post-reboot.sh

[Install]
WantedBy=multi-user.target

EOF_reboot_unit

/usr/bin/systemctl daemon-reload
/usr/bin/systemctl enable ks-post-reboot.service
chmod +x /usr/local/sbin/ks-post-reboot.sh

wget -q --output-document=- 'http://sbgquattor.in2p3.fr/cgi-bin/aii-installack.cgi'     
%end
"""


    def write_kickstart_file(self):
        """Write Kickstart file."""
        filename = os.path.join('/opt/tmp/pxe_boot/ansible_ks',
            self.host_vars['inventory_hostname'] + '.ks')
        # Create directory if it doesn't exist
        if not os.path.exists(os.path.dirname(filename)):
            os.makedirs(os.path.dirname(filename))
        # Open filename for writing
        with open(filename, 'w') as f:
            f.write('\n'.join(self.kickstart_data.values()))

def generate_config_for_all_hosts():
    """Generate config for all hosts."""
    my_hosts_data = MyMyHostsData("vault/ansible_data/hosts")
    for host in my_hosts_data.get_hosts_list():
        host_vars = my_hosts_data.get_vars(host)
        # If group_names contains either 'ce_arc', 
        # 'grid_ui' or 'grid_wn', do not generate config
        if ('ce_arc' in host_vars['group_names'] 
            or 'grid_ui' in host_vars['group_names'] 
            or 'grid_wn' in host_vars['group_names']):
            CreatePXEFile(host_vars)
            CreateKickstartFile(host_vars)

# ------------------------------------------------------------------------------
def main():
    """Main function."""
    parser = argparse.ArgumentParser(description=DESCRIPTION)
    parser.add_argument(
        "-v", "--version", action="version", version=VERSION,
        help="show program\'s version number and exit"
    )
    args = parser.parse_args()

    generate_config_for_all_hosts()

# ------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
